/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MapImport } from './routes/map'

// Create Virtual Routes

const StoriesLazyImport = createFileRoute('/stories')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const StoriesLazyRoute = StoriesLazyImport.update({
  id: '/stories',
  path: '/stories',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/stories.lazy').then((d) => d.Route))

const MapRoute = MapImport.update({
  id: '/map',
  path: '/map',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/map.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/map': {
      id: '/map'
      path: '/map'
      fullPath: '/map'
      preLoaderRoute: typeof MapImport
      parentRoute: typeof rootRoute
    }
    '/stories': {
      id: '/stories'
      path: '/stories'
      fullPath: '/stories'
      preLoaderRoute: typeof StoriesLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/map': typeof MapRoute
  '/stories': typeof StoriesLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/map': typeof MapRoute
  '/stories': typeof StoriesLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/map': typeof MapRoute
  '/stories': typeof StoriesLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/map' | '/stories'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/map' | '/stories'
  id: '__root__' | '/' | '/map' | '/stories'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  MapRoute: typeof MapRoute
  StoriesLazyRoute: typeof StoriesLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  MapRoute: MapRoute,
  StoriesLazyRoute: StoriesLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/map",
        "/stories"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/map": {
      "filePath": "map.tsx"
    },
    "/stories": {
      "filePath": "stories.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
